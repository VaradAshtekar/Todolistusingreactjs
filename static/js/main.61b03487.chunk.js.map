{"version":3,"sources":["logo.svg","App.js","Inputval.jsx","Todolist.jsx","serviceWorker.js","index.js"],"names":["module","exports","App","Inputval","props","className","text","aria-hidden","onClick","onSelect","id","Todolist","useState","inputList","setInputList","Items","setItems","deleteItems","console","log","oldItems","filter","arrElem","index","type","placeholder","value","onChange","event","target","map","itemval","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,mKCyB5BC,I,cCLAC,EAlBE,SAACC,GAGd,OACC,oCACC,yBAAKC,UAAU,QACb,gCAAMD,EAAME,KAAZ,KACA,uBAAGD,UAAU,gBAAgBE,cAAY,OAAOC,QAAS,WACvDJ,EAAMK,SAASL,EAAMM,UCgDhBC,EArDE,WAAO,IAAD,EACcC,mBAAS,aADvB,mBACbC,EADa,KACFC,EADE,OAEMF,mBAAS,IAFf,mBAEbG,EAFa,KAENC,EAFM,KAiBdC,EAAc,SAACP,GAClBQ,QAAQC,IAAI,WACZH,GAAS,SAACI,GACP,OAAOA,EAASC,QAAO,SAACC,EAASC,GAC9B,OAAOA,IAAUb,SAMzB,OACI,oCACG,yBAAKL,UAAU,YACX,yBAAKA,UAAU,cACZ,6BACA,wCACA,6BACA,2BAAOmB,KAAK,OAAOC,YAAY,cAAcC,MAAOb,EAAWc,SA9B5D,SAACC,GACdd,EAAac,EAAMC,OAAOH,UA8BhB,4BAAQlB,QA3BH,WACfQ,GAAS,SAACI,GACN,MAAM,GAAN,mBAAWA,GAAX,CAAqBP,OAGzBC,EAAa,OAsBH,OAEA,4BACIC,EAAMe,KAAK,SAACC,EAASR,GACnB,OAAO,kBAAC,EAAD,CACPS,IAAKT,EACLb,GAAIa,EACJjB,KAAMyB,EACNtB,SAAYQ,YCpChBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.61b03487.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nconst Inputval = (props) => {\r\n\r\n\r\n    return (\r\n     <>   \r\n      <div className=\"todo\">\r\n        <li> {props.text} </li>\r\n        <i className=\"fa fa-trash-o\" aria-hidden=\"true\" onClick={() => {\r\n          props.onSelect(props.id);\r\n        }}></i>\r\n\r\n      </div>    \r\n     </>\r\n    );  \r\n\r\n\r\n};\r\n\r\nexport default Inputval;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport Inputval from './Inputval'\r\n\r\n\r\nconst Todolist = () => {\r\n   const [inputList, setInputList] = useState(\"buy apple\")\r\n   const [Items, setItems] = useState([]);\r\n\r\n   const itemEvent = (event) => {\r\n        setInputList(event.target.value);\r\n   };\r\n\r\n   const listOfItems = () => {\r\n        setItems((oldItems) => {\r\n            return [...oldItems, inputList];\r\n        })\r\n\r\n        setInputList(\" \")\r\n   };\r\n\r\n   \r\n   const deleteItems = (id) => {\r\n      console.log(\"clicked\");\r\n      setItems((oldItems) => {\r\n         return oldItems.filter((arrElem, index) => {\r\n            return index !== id;\r\n         })\r\n      })\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n           <div className=\"main_div\">\r\n               <div className=\"center_div\">\r\n                  <br/>\r\n                  <h1>Todolist</h1>\r\n                  <br/>\r\n                  <input type=\"text\" placeholder=\"Add an Item\" value={inputList} onChange={itemEvent}/>\r\n                  <button onClick={listOfItems}> + </button>\r\n\r\n                  <ol>\r\n                     {Items.map( (itemval, index) => {\r\n                        return <Inputval\r\n                        key={index}\r\n                        id={index}\r\n                        text={itemval}\r\n                        onSelect = {deleteItems} \r\n                        />;\r\n                     })}\r\n                  </ol>\r\n               </div>\r\n           </div>        \r\n        </>\r\n    )\r\n};\r\n\r\nexport default Todolist;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Todolist from './Todolist';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Todolist />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}